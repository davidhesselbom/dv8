# API documentation, Deviate OS

This document describes the interface exposed by the file kernel_api.h. User programs must include kernel_api.h to gain access to operating system routines.

## Process execution and termination

* void kill_self(void)
* uint32_t kill(uint32_t pid)
* uint32_t exec(const char program[], uint32_t priority)

### void kill_self(void)

Used by a process to terminate itself. The process is considered to have terminated successfully.

### uint32_t kill(uint32_t pid)

Terminates the process with the indicated PID. Returns 1 if successful, otherwise 0. The killed process is considered to have terminated in an unusual way.

### uint32_t exec(const char program[], uint32_t priority)

Spawns a new process __program__ with the priority __priority__.

## Process intercommunication

* uint32_t send_message(const msg_t *msg)
* uint32_t read_from_console(msg_t *msg)
* uint32_t read_message_by_type(msg_t *msg, msg_type_t type, int max_wait_ms)
* uint32_t read_next_message(msg_t *msg, int max_wait_ms)

### uint32_t send_message(const msg_t *msg)

Sends a message to the process indicated by msg->receiver_pid. The receiver is unblocked immediately if the message was expected, otherwise the message is simply added to the receiver's inbox for later processing. send_message returns zero and kills the sender process if the receiver's inbox is full.

### uint32_t read_from_console(msg_t *msg)

The reading process is added to the console's input queue and blocks. When the console dispatches a message to the process, it is unblocked. If the process is unblocked without having been sent a console message, the message pointed to by __msg__ is marked as invalid. Always returns 1.

### uint32_t read_message_by_type(msg_t *msg, msg_type_t type, int max_wait_ms)

The reading process waits for a new message of the given __type__. If max_wait_ms is 0, the process blocks until an appropriate message is received. If max_wait_ms is > 0, the process blocks for a maximum of max_wait_ms milliseconds. If the process is unblocked without being given an appropriate message, the message pointed to by __msg__ is marked as invalid.

### uint32_t read_next_message(msg_t *msg, int max_wait_ms)

The reading process waits for a new message of any type. If max_wait_ms is 0, the process blocks until a message is received. If max_wait_ms is > 0, the process blocks for a maximum of max_wait_ms milliseconds. If the process is unblocked without being given a message, the message pointed to by __msg__ is marked as invalid.

## Process and scheduling manipulation

* void set_inbox_limit(uint32_t limit)
* void sleep(int time)
* uint32_t change_priority(uint32_t pid, uint32_t priority)
* uint32_t block(uint32_t pid)
* uint32_t unblock(uint32_t pid)
* void block_self(void)
* void supervise(uint32_t pid)

### void set_inbox_limit(uint32_t limit)

When a process is spawned, its inbox is limited only by the number of messages available in the kernel's message freelist. This function limits the inbox size to a given number __limit__. If a process attempts to send a message to a process with a full inbox, the sender is terminated.

### void sleep(int time)

Puts the calling process into the scheduler's wait queue for a set amount of time, after which it is moved back into the ready queue.

### uint32_t change_priority(uint32_t pid, uint32_t priority)

Sets a process _pid__'s priority to __priority__. Returns [number] on success, otherwise [other number]

### uint32_t block(uint32_t pid)

Moves a process __pid__ into the wait queue, where it will stay until unblocked or terminated.

### uint32_t unblock(uint32_t pid)

Moves a process __pid__ from the wait queue back into the ready queue.

### void block_self(void)

Moves the calling process into the wait queue until unblocked.

### void supervise(uint32_t pid)

Sets the supervisor flag in the process __pid__ to the pid of the calling process. A supervisor process does not keep track of which processes it supervises, but is informed by the scheduler whenever a process it is assigned supervisor to terminates, as well as the nature of this termination.

## Process information

* const char * get_process_name(uint32_t pid)
* uint32_t get_process_priority(uint32_t pid)
* process_state_t get_process_state(uint32_t pid)

### const char * get_process_name(uint32_t pid)

Returns the human-readable name of the process with the given __pid__. NULL if no such process exists.

### uint32_t get_process_priority(uint32_t pid)

Returns the priority of the process with the given __pid__. Returns 0 if no such process exists.

### process_state_t get_process_state(uint32_t pid)

Returns the current scheduling state of the process with the given __pid__. Returns 0 if no such process exists.

## Printing

* void print_char(char c)
* void print_str(const char str[])
* void print_strln(const char str[])
* void print_int(int x)
* void print_lcd(const char str[])

### void print_char(char c)

Prints a single char __c__ to the console.

### void print_str(const char str[])

Prints a string __str__ to the console.

### void print_strln(const char str[])

Prints a string __str__ followed by a newline to the console.

### void print_int(int x)

Prints an integer __x__ to the console.

### void print_lcd(const char str[])

Prints a string to the Malta LCD, overwriting any message currently being displayed.
