fixa ta bort message queue pcb när den försvinner
fundera över add/remove input listener-placering

# Todo

__All:__ kinit, scheduler, process, etc.

__Seb:__ utility functions (strcmp, etc.), generic lists/queues

__Simon:__ group leader, kinit supervisor

__Jon:__ more scheduler, generic lists/queues

__David:__ user programs, more scheduler

relocate spawn and associated functionality?
think through syscalls a bit more, again
fix input and shell

#Requirement Set A

The basic requirements are divided into a number of categories, each detailing a certain area of OS functionality.
Process Handling

The operating system should provide the concept of processes that run pseudo-parallel to each other by sharing time on the single processor in the system.
###PH1: Process States

* __FIXED__ Processes should be possible to block.
    - We use a function named block which takes a process pid and puts that process in the waiting queue.
* __FIXED__ A blocked process should not be able to run until it is unblocked.
    - A process is blocked until we use the function unblock, taking the process pid as argument.
* __FIXED__ It should be possible to delay a process for a specified amount of time.
    - We use a function named sleep, which puts the process in the wait queue for a specified amount of time.
* __FIXED__ When a process is delayed, it should not be able to execute any code.
    - If the process is in the wait queue, it does not run.

###PH2: Process Priorities

* __FIXED__ Each process should have a priority.
    - When a process is created, it gets its priority.
* __FIXED__ The number of priority levels should be at least 30.
    - We use uint_32 as the datatype for the priority and thus we have more than 30 priority levels.
* __FIXED__ Priorities should be specified at process start.
    - When a process is created it gets its priority.
* __FIXED__ Priorities should be changeable at run-time.
    - We have a function named change_priority which takes a pid and a new priority value.

###PH3: Process Scheduling

Scheduling should be highest-priority first, with preemption. In particular:

* __FIXED__ A higher-priority process should be scheduled in preference to a lower-priority process.
    - The ready queue is a priority queue, where higher priority is placed ahead of lower priority processes.
* __FIXED__ Between processes of the same priority, round-robin scheduling should be used.
    - When processes have the same priority, the process which have been longest in the queue is placed ahead in the ready queue.
* __FIXED__ Higher-priority processes should be able to preempt lower-priority processes.
    - When a process is created, we re-schedule. So if the new process has higher priority it will get to run instantly.
* __FIXED__ There should be a recurring regular check for which process to run, unrelated to whether a particular task has finished its work.
    - On each timer interrupt we re-schedule.
* __FIXED__ A lower priority process should not be allowed to run if there is a higher priority process ready to run. We expect strict highest-priority-first scheduling.
    - The ready queue is a priority queue.
###PH4: Process Identities

* __FIXED__ Each process should have a unique ID that can be used to address the process and perform operations on it.
    - When a process is created, it gets a unique ID, called pid, which is stored in its PCB.
* __FIXED__ A process may have a human-readable name.
    - When a process is created, it gets the name of the process(program), which is stored in its PCB. There can exist processes with the same name.

###PH5: Process Creation

* __FIXED__ Processes should be able to create new processes.
    - A process can use the function exec to create a new process.
* __FIXED__ Processes are created by a spawn operation that starts a new process with a given code to run (see requirement PH7).
    - We have a function called exec which does just that.
* __FIXED__ The spawn operation should return the ID of the created process.
    - exec returns the pid of the created process.
* __FIXED__ If the process spawning fails for some reason, an error should be reported.
    - If exec fails to spawn a process, it returns NULL.

###PH6: Process Termination

* __FIXED__ Processes should be able to terminate themselves.
    - A process can call the kill_self function which kills the process.
* __FIXED__ Processes should be able to terminate other processes.
    - A process can kill other process by using the kill function.
* __FIXED__ The operating system should be able to terminate processes.
    - Yes, with kkill(kernel mode) or with kill.

###PH7: Programs and Processes

* __FIXED__ Each process runs the code of a particular program.
* __FIXED__  The program to execute in a process is specified when the process starts.
* __FIXED__ Each program should have an ID that is used to identify it when starting a process.
* __FIXED__ Each program should have a human-readable name associated with it. This might be the same as the ID.
* __FIXED__ There should be a global table of available programs.
* __FIXED__ It should be possible to start every program in multiple simultaneous instances.

###PH8: Process Information

* __FIXED__ A process should be able to obtain information about another process.
* __FIXED__ The information should include:
  - __FIXED__ Process priority
  - __WONT_FIX__ Process name, if such is used
  - __FIXED__ Name of the program running in the process
  - __FIXED__ Current scheduling state of the process
* __FIXED__ This information should be readable by the process requesting it.
* __FIXED__ The information should not be printed directly to the console; if it is to be presented to the user, a program (or function in the shell program) will have to be written for that purpose.

###PH9: Resource Recycling

* __FIXED__ When a process is terminated, all resources that it has allocated should be reclaimed.
* __FIXED__ Process IDs should be recycled.
* __FIXED__ The operating system should never "leak" memory, if there are dynamically allocated or assigned resources.

###PH10: Process Limitations

* __FIXED__ There can be a fixed upper limit on the number of processes allowed in the  system.
* __FIXED__ Process IDs should be reused, as per requirement PH9.
* __FIXED__ Any fixed upper limits must be easy to modify, using a #define or similar C construct.

##Input and Output

The system has to provide some kind of input and output facility to do interesting work.
###IO1: Text Consoles

* __FIXED__ The system should provide at least one text console for input and output.

###IO2: Interrupt-Driven IO

* __FIXED__ Text input and output shall be implemented using interrupt-driven IO on the serial port of the system.

###IO3: Text Output

* __FIXED__ It should be possible for processes to send text to a console.
* __FIXED__ It should be possible to send coherent messages, i.e. a process should be able to send a text message that is printed uninterrupted on a text console.

###IO4: Text Input

* __FIXED__ It should be possible for a process to request the user to input text.
* __FIXED__ Text input should be returned as a string to the requesting process.

###IO5: Malta LCD Output

* __FIXED__ It should be possible for a process to output text to the Malta LCD display

##System Application Programming Interface (API)

The operating system should provide an API for user programs.
###A1: General

* The API should be the only way to request services from the operating system kernel.

###A2: Syscall

* __FIXED__ The MIPS Syscall exception mechanism should be used to implemented the API.

###A3: Documentation

* The API should be presented to the user programs as a set of C functions.
* The API should be documented for the benefit of user programs.

##Other

There are some other requirements that do not fit conveniently under the headings above.
###O1: No Shared Memory

* __FIXED__ Processes should never use shared variables or memory to communicate.
* __FIXED__ It is not necessary for the operating system to rigorously enforce this condition.

###O2: Reentrancy

It should be possible to execute multiple instances of the same program concurrently. In particular, this means that:

* __FIXED__ A program cannot use "static" variables in C or global variables.
* __FIXED__ Any attempts at using names to identify processes has to allow for the dynamic creation of names.

###O3: Error Handling

Whenever the operating system cannot complete an operation, it should return an error code to the process trying to perform the operation.

* Error codes should be returned to the calling process as the function result, so that it has the ability to deal with the error.
* To help debugging programs, the OS may provide the facility to print diagnostic errors to the console automatically.

##User Programs

The system would be no fun without a set of programs to run on it. For demonstration purposes, you should implement a set of simple user programs.
###UP1: Increment

__FIXED__ A user level program that prints out an increasing number sequence 1, 2, 3, ...., N to the console. Each number should be printed on a separate line.
###UP2: Fibonacci

__FIXED__ A user level program that prints out the Fibonacci number serie: 1, 1, 2, 3, 5, 8, 11, ....... Max-Fib-Number. Each number should be printed on a separate line.
###UP3: Command Shell

The system should have a command shell that can do at least the following:

* __FIXED__ Start processes. For example, it shall be possible to start another interpreter.
* __FIXED__ Change priority of processes.
* __FIXED__ Obtain information about present processes.
* __FIXED__ Terminate processes.
* __FIXED__ Ouput to the Malta LCD display
* __FIXED__ It should be possible to have more than one shell running simultaneously.
* __FIXED__ The command shell should not be special-treated by the operating system in any way.
* __FIXED__ The command shell has to handle "backspace" functionality when entering commands.
* __FIXED__ The command shell should not use CPU time when waiting for input.

###UP4: Text Scroller

There should be a scroller background process that scrolls text on the Malta board LCD display.

* __FIXED__ The text can be varied or fixed, depending on the level of ambition.
* __FIXED__ The process should provide for smooth scrolling even on a highly loaded system.
* __FIXED__ The scroller should be a regular user process with high priority.
* __FIXED__ The scroller should sleep between updates to the display.
* __FIXED__ The scroller should start when the operating system starts.

#Requirement Set B

These requirments are mandatory only for KandDV students.
##Message Passing (3 pts)

Processes in the operating system should communicate using asynchronous message passing.
###MP1: Messages

* __FIXED__ Messages are unicast, going from one process to precisely one other process.
* __FIXED__ The messages should be able to contain some user data.
* __FIXED__ Messages should be tagged with sender and receiver process identities.
* __FIXED__ Messages should have a type or priority field for filtering by the receiver.
* __FIXED__ It should be possible to pass process identities using messages.

###MP2: Message Queues

* __FIXED__ Each process should have a single message queue for incoming messages.
* __FIXED__ The message queue can have a fixed upper bound on the number of messages stored.

###MP3: Sending Messages

* __FIXED__ Processes should be able to send messages to other processes.
* __FIXED__ The send should not depend on the state of the other process.
* The send operation should report an error if the message queue of the receiving process is full.
* __FIXED__ The send operation should never block the sending process.

###MP4: Receiving Messages

* __FIXED__ Processes should be able to receive messages from their message queue.
_Each process has a queue in thier PCB._
* __FIXED__ The receive operation should be able to filter messages based on the type or priority of the message.
* __FIXED__ The user-defined data specified in the message should be readable by the receiver.
* __FIXED__ The receive operation should block the receiving process if the message queue is empty.
* __FIXED__ It should be possible to specify a time-out for a receive operation, after which a process will resume operation even if no message arrives, and report an error.

###UP5: Ring

A user level program that demonstrates process communication.

* __FIXED__ A program should start a set of other processes, P1 to Pn.
_Yes, it does. It ring starts ringn (ring node). If the ring is not complete, i.e. due to lack of PCBs, ring will terminate the spawned ringn processes again. The argument to each nodes is sent by message passing._
* __FIXED__ The processes should be set up in a communications ring, where P1 sends messages to P2, etc. on to Pn.
_Yes, this is done with message passing._
* __FIXED__ The demonstration should send some messages around the ring and show that they visit all processes along the way.
_Yes, the when the message is recieved it will send it to the next process then end._
* __FIXED__ The user should only need to start a single process to start the ring demo: the main program should start the other processes involved.
_Yes, the program ring spawns n ringn's._
* __FIXED__ The main ring program should return to the shell when done setting up the ring.
_Yes, exactly._
* __FIXED__ Timers for when to send messages should be set in such a way that it is possible to observe the processes involved in the ring from the shell.
_Yes, a sufficient sleep is set in the ringn program. top is used to observe._

###UP6: Dining Philosophers

This demonstrates process synchronization (you will need to work out how to synchronize processes given the message passing paradigm). The dining philosophers program is a program solving a problem with resource sharing as follows. A group of philosophers are sitting around a dining table (formed as a circle). Between each pair of philosophers is one fork. Occasionally, one philosopher wants to eat and to do that he needs two forks. This means that two philosophers sitting next to each other can not eat at the same time. You should implement this with the following in mind:

* __FIXED__ Each philosopher is a process of its own with a behavior that is similar to the following:

think(random())
get one fork
get other fork
eat(random())
drop forks
restart
_Yes, exactly._

* __FIXED__ Like UP3, the entire setup should be started by a single process.
_Yes, exactly._
* __FIXED__ Like UP3, the main program should return and make it possible to observe the processes running.
_Yes, exactly, it returns to the shell where you can use "top"._

##Process Supervision (2 pts)

So far, process lives on its own. Nobody else cares if a process terminates.
In most real real-time operating systems, processes can be linked together in
order to provide fault detection and tolerance.

###PS1: Provide Process Supervision

* __FIXED__ Processes can be appointed as supervisors of one or more other processes.
_Yes, the supervisior is set in the supervised PCB with the call __supervise__._
* __FIXED__ When a supervised process terminates, the supervisor is notified.
_Yes, the kill function sends a message to the supervisor, if one exists._
* __FIXED__ It should be possible to differentiate between controlled and uncontrolled
  termination, i.e. it should be possible for the supervisor to see if a
  subordinate process has crashed or if it terminated in good order.
_Yes, the killself and kill function sets different states of the PCB._ 
* __FIXED__ To provoke crashes, the semantics of the send operation is changed so that a
  process terminates if the receiving process has a full message queue.
_Yes, exactly._

###UP7: Process Supervision

* __FIXED__ A demo application and application note should describe the mechanism and demonstrate that you have a working implementation of process supervision. The demo should include a supervisor that restarts its subordinates if they crash.

_Supervision demo spawns a "spammer" and sets itself to be its supervisor. Spammer then forces itself to a crash by spamming itself with messages, the supervisor will the be notfied of the crash and spawn it again. This will be done 10 times._
